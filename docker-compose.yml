version: '3.9'

services:
  sui-fullnode:
    image: mysten/sui-node:ci-arm64
    container_name: sui-fullnode-testnet
    restart: always
    volumes:
      - ./sui-config:/sui-config
      - ./sui-db:/sui-db
      - ./sui-data:/sui-data
    ports:
      - "9000:9000"
      - "9184:9184"
    command: [
      "sui-node",
      "--config-path", "/sui-config/fullnode.yaml"
    ]

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - zk_data:/var/lib/zookeeper/data
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    # TODO (на будущее) лучше запретить автосоздание топиков и контролировать эти параметры для каждого топика отдельно
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 10

  kafka-manager:
    image: hlebalbau/kafka-manager:stable
    container_name: kafka-manager
    depends_on:
      - kafka
    ports:
      - "9001:9000"
    environment:
      ZK_HOSTS: zookeeper:2181
      KAFKA_MANAGER_AUTH_ENABLED: "false"
      KAFKA_CLUSTERS: >
        [{ "name": "LocalKafka",
           "zkHosts": "zookeeper:2181",
           "jmxEnabled": false,
           "pollConsumers": false,
           "kafkaVersion": "2.8.0",
           "activeOffsetCacheEnabled": false }]
    restart: always

  sui-postgres:
    image: postgres:15
    container_name: sui-postgres
    user: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres3
      POSTGRES_DB: suiindex
    ports:
      - "54322:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data

  sui-liquibase-postgres:
    image: dordidora/sui-liquibase:latest
    container_name: sui-liquibase-postgres
    depends_on:
      - sui-postgres
#    volumes:
#      - ./docker-config/liquibase/db/changelog:/liquibase/changelog
    environment:
      POSTGRESQL_URL: jdbc:postgresql://sui-postgres:5432/suiindex
      POSTGRESQL_USERNAME: postgres
      POSTGRESQL_PASSWORD: postgres3
    command: >
      /bin/sh -c "liquibase --url=jdbc:postgresql://sui-postgres:5432/suiindex --username=postgres 
      --password=postgres3 --changelog-file=master.xml --searchPath=/liquibase/changelog update"

  clickhouse:
    image: dordidora/sui-clickhouse-server:latest
    container_name: clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
      - "9009:9009"
    volumes:
      - ch_data:/var/lib/clickhouse
#      - ./docker-config/clickhouse/init:/docker-entrypoint-initdb.d/
    environment:
      CLICKHOUSE_DB: suiaggr
      CLICKHOUSE_USER: suiuser
      CLICKHOUSE_PASSWORD: suipass

  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: [ "redis-server", "--appendonly", "yes" ]
    restart: always

  sui-checkpoint-receiver-1:
    build:
      context: ./sui-checkpoint-receiver
      dockerfile: Dockerfile
    container_name: sui-checkpoint-receiver
    environment:
      - POD_NAME=remote-reader-0
    depends_on:
      - kafka

  sui-checkpoint-receiver-2:
    build:
      context: ./sui-checkpoint-receiver
      dockerfile: Dockerfile
    container_name: sui-checkpoint-receiver
    environment:
      - POD_NAME=remote-reader-1
    depends_on:
      - kafka

  indexing-service-1:
    build:
      context: .
      dockerfile: ./indexing-service/Dockerfile
    image: dordidora/indexing-service:latest
    pull_policy: never
    container_name: indexing-service
    environment:
        - SPRING_JPA_HIBERNATE_DDL_AUTO=none
        - POD_NAME=indexing-service-1
    depends_on:
      - kafka
      - sui-postgres
      - clickhouse
    ports:
      - "8081:8081"

  indexing-service-2:
    build:
      context: .
      dockerfile: ./indexing-service/Dockerfile
    image: dordidora/indexing-service:latest
#    pull_policy: never
#    container_name: indexing-service
    environment:
      - SPRING_JPA_HIBERNATE_DDL_AUTO=none
      - POD_NAME=indexing-service-2
    depends_on:
      - kafka
      - sui-postgres
      - clickhouse
    ports:
      - "8083:8081"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana

  sui-api:
    build:
      context: ./sui-api
      dockerfile: Dockerfile
    container_name: sui-api
    environment:
      - SPRING_JPA_HIBERNATE_DDL_AUTO=none
    depends_on:
      - sui-postgres
    ports:
      - "8082:8082"

volumes:
  zk_data:
  pg_data:
  ch_data:
  grafana-storage:
  redis_data: